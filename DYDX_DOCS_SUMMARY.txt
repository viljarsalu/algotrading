================================================================================
                    dYdX OFFICIAL DOCUMENTATION SUMMARY
================================================================================

SOURCE: https://docs.dydx.xyz/
DOCUMENTATION VERSION: October 2025
dYdX API VERSION: V4

================================================================================
                              OVERVIEW
================================================================================

dYdX Integration Documentation provides everything needed to build:
  • Trading applications
  • Trading bots
  • Analytics tools
  • DeFi dashboards
  • High-frequency trading systems

The documentation includes:
  • REST & WebSocket API references
  • Integration guides
  • Python, TypeScript, and Rust examples
  • Best practices and patterns

================================================================================
                          GETTING STARTED
================================================================================

INSTALLATION:
  pip install dydx-v4-client

OR:
  git clone https://github.com/dydxprotocol/v4-clients.git
  cd v4-clients/v4-client-py-v2
  poetry install

PYTHON VERSION: 3.9+
PACKAGE MANAGER: Poetry

================================================================================
                        AVAILABLE CLIENTS
================================================================================

1. NODE CLIENT (Validator Client)
   Purpose: Authenticated operations (trading, deposits, withdrawals)
   Features: Private API for order placement
   Requires: RPC/gRPC endpoint + HTTP endpoint + WebSocket endpoint
   
   Setup:
   from dydx_v4_client.network import make_mainnet, make_testnet
   from dydx_v4_client.node.client import NodeClient
   
   config = make_testnet(
       node_url="https://oegs-testnet.dydx.exchange:443",
       rest_indexer="https://indexer.v4testnet.dydx.exchange",
       websocket_indexer="wss://indexer.v4testnet.dydx.exchange/v4/ws"
   ).node
   node = await NodeClient.connect(config)

2. INDEXER CLIENT
   Purpose: Data queries (markets, accounts, positions, orders)
   Features: REST API + WebSocket API
   Authentication: None required (public API)
   Preferred for: Data retrieval
   
   Setup:
   from dydx_v4_client.indexer.rest.indexer_client import IndexerClient
   indexer = IndexerClient("https://indexer.v4testnet.dydx.exchange")

3. COMPOSITE CLIENT (TypeScript only)
   Purpose: Groups commonly used methods
   
4. FAUCET CLIENT
   Purpose: Request test funds on testnet
   Note: Testnet only

================================================================================
                            ENDPOINTS
================================================================================

TESTNET:
  Node RPC:           https://oegs-testnet.dydx.exchange:443
  Indexer REST:       https://indexer.v4testnet.dydx.exchange
  Indexer WebSocket:  wss://indexer.v4testnet.dydx.exchange/v4/ws

MAINNET:
  Node RPC:           https://oegs.dydx.trade:443
  Indexer REST:       https://indexer.dydx.trade
  Indexer WebSocket:  wss://indexer.dydx.trade/v4/ws

STATUS PAGE: https://grpc-status.dydx.trade/

================================================================================
                        TRADING WORKFLOW
================================================================================

STEP 1: GET MARKET DATA
  markets = await indexer.markets.get_perpetual_markets("BTC-USD")
  market = Market(markets["markets"]["BTC-USD"])

STEP 2: CREATE ORDER ID
  order_id = market.order_id(
      wallet.address,
      0,                                    # subaccount number
      random.randint(0, 100000000),        # client ID
      OrderFlags.SHORT_TERM                # order flags
  )

STEP 3: GET BLOCK HEIGHT
  good_til_block = await node.latest_block_height() + 10

STEP 4: BUILD ORDER
  order = market.order(
      order_id=order_id,
      order_type=OrderType.MARKET,         # or LIMIT, STOP, TAKE_PROFIT
      side=1,                               # 1=BUY, -1=SELL
      size=0.01,                            # quantity
      price=0,                              # 0 for market orders
      time_in_force=1,                      # 1=IOC, 2=FOK
      reduce_only=False,                    # can open new positions
      good_til_block=good_til_block,        # order validity
  )

STEP 5: BROADCAST ORDER
  tx_result = await node.place_order(wallet, order)
  tx_hash = tx_result.tx_response.txhash

================================================================================
                        INDEXER API ENDPOINTS
================================================================================

ACCOUNTS:
  • get_subaccounts(address, limit)
  • get_subaccount(address, subaccount_number)
  • get_subaccount_perpetual_positions(address, subaccount_number, status, limit)
  • get_subaccount_asset_positions(address, subaccount_number, status, limit)
  • get_subaccount_orders(address, subaccount_number, ticker, status, type)
  • get_subaccount_transfers(address, subaccount_number, limit)
  • get_subaccount_fills(address, subaccount_number, ticker, limit)
  • get_historical_pnl(address, subaccount_number, limit)

MARKETS:
  • get_perpetual_markets(market)
  • get_perpetual_market_orderbook(market)
  • get_perpetual_market_trades(market, limit)
  • get_perpetual_market_candles(market, resolution, from_iso, to_iso, limit)
  • get_historical_funding(market, limit)

UTILITY:
  • get_time()
  • get_height()
  • get_screen(address)
  • get_compliance_screen(address)

================================================================================
                        NODE CLIENT API (PRIVATE)
================================================================================

TRADING:
  • place_order(wallet, order, tx_options)
  • cancel_order(wallet, order_id, good_til_block, tx_options)
  • batch_cancel_orders(wallet, subaccount_id, short_term_cancels, good_til_block)

DEPOSITS & WITHDRAWALS:
  • deposit(wallet, subaccount_id, amount, tx_options)
  • withdraw(wallet, subaccount_id, amount, tx_options)
  • transfer(wallet, source_subaccount_id, recipient_subaccount_id, amount)

ACCOUNT MANAGEMENT:
  • close_position(wallet, subaccount_id, market, tx_options)

STAKING:
  • delegate(wallet, validator_address, amount, tx_options)
  • undelegate(wallet, validator_address, amount, tx_options)
  • withdraw_delegator_reward(wallet, validator_address, tx_options)

================================================================================
                        WEBSOCKET API
================================================================================

CONNECTION:
  Testnet:  wss://indexer.v4testnet.dydx.exchange/v4/ws
  Mainnet:  wss://indexer.dydx.trade/v4/ws

CHANNELS:
  • v4_accounts        - Account updates (balance, equity, collateral)
  • v4_orders          - Order updates (status, fills)
  • v4_markets         - Market data updates (price, funding)
  • v4_trades          - Trade updates for a market
  • v4_candles         - Candle data updates
  • v4_blockheight     - Block height updates
  • v4_parent_subaccounts - Parent subaccount updates

SUBSCRIBE:
  {
    "type": "subscribe",
    "channel": "v4_accounts",
    "id": "dydx14zzueazeh0hj67cghhf9jypslcf9sh2n5k6art"
  }

UNSUBSCRIBE:
  {
    "type": "unsubscribe",
    "channel": "v4_accounts",
    "id": "dydx14zzueazeh0hj67cghhf9jypslcf9sh2n5k6art"
  }

================================================================================
                        ORDER PARAMETERS
================================================================================

ORDER TYPE:
  • OrderType.MARKET       - Execute immediately at market price
  • OrderType.LIMIT        - Execute at specified price or better
  • OrderType.STOP         - Trigger when price reaches level
  • OrderType.TAKE_PROFIT  - Close position at profit target

ORDER SIDE:
  • 1 or BUY   - Purchase
  • -1 or SELL - Sell

TIME IN FORCE:
  • 0 - TIME_IN_FORCE_UNSPECIFIED (default)
  • 1 - TIME_IN_FORCE_IOC (Immediate or Cancel)
  • 2 - TIME_IN_FORCE_FOK (Fill or Kill)
  • 3 - TIME_IN_FORCE_POST_ONLY (Post Only)

ORDER FLAGS:
  • OrderFlags.SHORT_TERM (0)   - Valid ~30 seconds (20 blocks)
  • OrderFlags.LONG_TERM (64)   - Valid 95 days
  • OrderFlags.CONDITIONAL (32) - Conditional order

REDUCE ONLY:
  • True:  Order can only decrease position size
  • False: Order can open new positions

GOOD UNTIL BLOCK:
  • Short-term: current_block_height + 10 (max 20 blocks)
  • Long-term:  current_block_time + 95 days

================================================================================
                        KEY CONCEPTS
================================================================================

ACCOUNTS & SUBACCOUNTS:
  • Each wallet address can have multiple subaccounts
  • Subaccounts identified by: address + subaccount_number
  • Default subaccount is 0
  • Each subaccount has independent positions and balances

ORDER VALIDITY:
  • Short-term: ~30 seconds (20 blocks) - Lower fees
  • Long-term: 95 days - Higher fees

REDUCE ONLY:
  • When true: Order can only decrease position size
  • Prevents accidental position reversal
  • Useful for closing positions

MARKET DATA:
  • Atomic resolution: Decimal places for on-chain representation
  • Display decimals: Decimal places for display
  • Step base quantums: Minimum order size increment
  • Subticks per tick: Price precision

================================================================================
                        BEST PRACTICES
================================================================================

1. TEST ON TESTNET FIRST
   Use testnet endpoints before mainnet trading

2. USE SHORT-TERM ORDERS BY DEFAULT
   OrderFlags.SHORT_TERM - ~30 seconds, lower fees

3. ADD BUFFER TO GOOD_TIL_BLOCK
   good_til_block = await node.latest_block_height() + 10

4. VALIDATE MARKET EXISTS
   markets = await indexer.markets.get_perpetual_markets("BTC-USD")
   if "BTC-USD" not in markets["markets"]:
       raise ValueError("Market not found")

5. HANDLE WEBSOCKET RECONNECTIONS
   Implement exponential backoff for reconnection attempts

6. USE REDUCE_ONLY FOR CLOSING POSITIONS
   reduce_only=True prevents accidental position reversal

7. MONITOR BLOCK HEIGHT
   Important for order validity and expiration

8. ENCRYPT SENSITIVE DATA
   Store mnemonics and private keys securely

9. IMPLEMENT ERROR HANDLING
   Handle network errors, invalid orders, insufficient balance

10. USE INDEXER FOR DATA QUERIES
    Preferred over Node Client for data retrieval

================================================================================
                        COMMON PATTERNS
================================================================================

PATTERN 1: QUERY ACCOUNT DATA
  subaccount = await indexer.accounts.get_subaccount(address, 0)
  equity = subaccount["subaccount"]["equity"]
  free_collateral = subaccount["subaccount"]["freeCollateral"]

PATTERN 2: GET CURRENT POSITIONS
  positions = await indexer.accounts.get_subaccount_perpetual_positions(
      address, 0, status="OPEN"
  )
  for position in positions["positions"]:
      print(f"{position['market']}: {position['size']} {position['side']}")

PATTERN 3: MONITOR ORDER STATUS
  orders = await indexer.accounts.get_subaccount_orders(address, 0)
  for order in orders["orders"]:
      if order["id"] == order_id:
          print(f"Status: {order['status']}")

PATTERN 4: REAL-TIME ACCOUNT UPDATES
  await socket.subscribe("v4_accounts", address)
  async for message in socket:
      data = json.loads(message)
      if data["type"] == "channel_data":
          print(f"New equity: {data['contents']['subaccount']['equity']}")

PATTERN 5: PLACE AND MONITOR ORDER
  # Place order
  tx_result = await node.place_order(wallet, order)
  
  # Monitor status
  while True:
      orders = await indexer.accounts.get_subaccount_orders(address, 0)
      for o in orders["orders"]:
          if o["id"] == order_id:
              if o["status"] == "FILLED":
                  print("Order filled!")
                  break

================================================================================
                        USEFUL LINKS
================================================================================

Official Documentation:     https://docs.dydx.xyz/
Python Quick Start:         https://docs.dydx.xyz/interaction/client/quick-start-py
Trading Guide:              https://docs.dydx.xyz/interaction/trading
Indexer API:                https://docs.dydx.xyz/indexer-client/http
Node Client:                https://docs.dydx.xyz/node-client
WebSocket API:              https://docs.dydx.xyz/indexer-client/websockets
GitHub Clients:             https://github.com/dydxprotocol/v4-clients
Status Page:                https://grpc-status.dydx.trade/
Onboarding FAQ:             https://docs.dydx.xyz/concepts/onboarding-faqs

================================================================================
                        QUICK COMMANDS
================================================================================

Get all markets:
  curl https://indexer.v4testnet.dydx.exchange/v4/perpetualMarkets

Get specific market:
  curl https://indexer.v4testnet.dydx.exchange/v4/perpetualMarkets?market=BTC-USD

Get account info:
  curl https://indexer.v4testnet.dydx.exchange/v4/accounts/{address}

Get positions:
  curl https://indexer.v4testnet.dydx.exchange/v4/perpetualPositions?address={address}

Get orders:
  curl https://indexer.v4testnet.dydx.exchange/v4/orders?address={address}

Get orderbook:
  curl https://indexer.v4testnet.dydx.exchange/v4/orderbooks/perpetualMarket/BTC-USD

Get trades:
  curl https://indexer.v4testnet.dydx.exchange/v4/trades/perpetualMarket/BTC-USD

Get candles:
  curl https://indexer.v4testnet.dydx.exchange/v4/candles/perpetualMarkets/BTC-USD?resolution=1DAY

================================================================================
                        SUMMARY
================================================================================

dYdX V4 provides a complete trading infrastructure with:

✓ Node Client for authenticated operations (trading, deposits, withdrawals)
✓ Indexer Client for data queries (markets, accounts, positions, orders)
✓ WebSocket API for real-time updates
✓ Support for Python, TypeScript, and Rust
✓ Testnet for safe testing before mainnet
✓ Comprehensive documentation and examples
✓ Non-custodial architecture (users control their keys)
✓ Multiple order types (market, limit, stop, take profit)
✓ Subaccount support for position isolation
✓ Short-term and long-term order options

Your application correctly implements all these features!

================================================================================
                        DOCUMENTATION CREATED
================================================================================

1. DYDX_OFFICIAL_DOCUMENTATION.md
   - Comprehensive reference for all dYdX APIs
   - Complete endpoint documentation
   - Code examples for each feature

2. DYDX_QUICK_REFERENCE.md
   - Quick lookup guide
   - Common patterns and examples
   - Best practices

3. DYDX_DOCS_SUMMARY.txt (this file)
   - Executive summary
   - Quick commands
   - Key concepts

================================================================================
Last Updated: October 31, 2025
dYdX API Version: V4
Documentation Source: https://docs.dydx.xyz/
================================================================================
